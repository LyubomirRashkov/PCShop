<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCShop</name>
    </assembly>
    <members>
        <member name="T:PCShop.Areas.Administration.Constant">
            <summary>
            Class holding administration constants
            </summary>
        </member>
        <member name="F:PCShop.Areas.Administration.Constant.UsersCacheKey">
            <summary>
            Constant for the users cache key
            </summary>
        </member>
        <member name="T:PCShop.Areas.Administration.Controllers.AccountController">
            <summary>
            Account controller class
            </summary>
        </member>
        <member name="M:PCShop.Areas.Administration.Controllers.AccountController.#ctor(Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole},PCShop.Core.Services.Interfaces.IUserService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor of AccountController class
            </summary>
            <param name="roleManager">The RoleManager<c>IdentityRole</c> needed for functionality</param>
            <param name="userService">The IUserService needed for functionality</param>
            <param name="memoryCache">The IMemoryCache needed for functionality</param>
        </member>
        <member name="M:PCShop.Areas.Administration.Controllers.AccountController.GetUsers">
            <summary>
            HttpGet action to retrieve all users that do not have the specified role
            </summary>
            <returns>Collection of users</returns>
        </member>
        <member name="M:PCShop.Areas.Administration.Controllers.AccountController.PromoteToAdmin(System.String)">
            <summary>
            HttpGet action to add the specified user to Administrator role
            </summary>
            <param name="id">User unique identifier</param>
            <returns>The corresponding view</returns>
        </member>
        <member name="T:PCShop.Areas.Administration.Controllers.BaseController">
            <summary>
            Base controller class for Administration area
            </summary>
        </member>
        <member name="T:PCShop.Areas.Administration.Controllers.HomeController">
            <summary>
            Home controller class
            </summary>
        </member>
        <member name="M:PCShop.Areas.Administration.Controllers.HomeController.Index">
            <summary>
            Action that returns the admin page
            </summary>
            <returns>The admin page</returns>
        </member>
        <member name="T:PCShop.Controllers.AccountController">
            <summary>
            Account controller class
            </summary>
        </member>
        <member name="M:PCShop.Controllers.AccountController.#ctor(Microsoft.AspNetCore.Identity.UserManager{PCShop.Infrastructure.Data.Models.Account.User},Microsoft.AspNetCore.Identity.SignInManager{PCShop.Infrastructure.Data.Models.Account.User},Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor of AccountController class
            </summary>
            <param name="userManager">The UserManager<c>User</c> needed for functionality</param>
            <param name="signInManager">The SignInManager<c>User</c> needed for functionality</param>
            <param name="memoryCache">The IMemoryCache needed for functionality</param>
        </member>
        <member name="M:PCShop.Controllers.AccountController.SignUp">
            <summary>
            HttpGet action for signing up
            </summary>
            <returns>A page that contains a form that must be filled</returns>
        </member>
        <member name="M:PCShop.Controllers.AccountController.SignUp(PCShop.Core.Models.User.SignUpViewModel)">
            <summary>
            HttpPost action for signing up
            </summary>
            <param name="model">The model that is filled by the user</param>
            <returns>If the model is valid creates the user, signs in the user and returns the home page. If there is an error returns the model</returns>
        </member>
        <member name="M:PCShop.Controllers.AccountController.SignIn(System.String)">
            <summary>
            HttpGet action for signing in
            </summary>
            <returns>A page that contains a form that must be filled</returns>
        </member>
        <member name="M:PCShop.Controllers.AccountController.SignIn(PCShop.Core.Models.User.SignInViewModel)">
            <summary>
            HttpPost action for signing in
            </summary>
            <param name="model">The model that is filled by the user</param>
            <returns>If the model is valid signs in the user, then returns the required page or the home page. If there is an error returns the model</returns>
        </member>
        <member name="M:PCShop.Controllers.AccountController.Signout">
            <summary>
            Action for signing out
            </summary>
            <returns>The home page</returns>
        </member>
        <member name="T:PCShop.Controllers.HomeController">
            <summary>
            Home controller class
            </summary>
        </member>
        <member name="M:PCShop.Controllers.HomeController.Index">
            <summary>
            Action that returns the home page
            </summary>
            <returns>The home page</returns>
        </member>
        <member name="M:PCShop.Controllers.HomeController.Error(System.Int32)">
            <summary>
            Action that handles errors
            </summary>
            <param name="statusCode">The status code of the response</param>
            <returns>The corresponding page</returns>
        </member>
        <member name="T:PCShop.Controllers.KeyboardController">
            <summary>
            Keyboard controller class
            </summary>
        </member>
        <member name="M:PCShop.Controllers.KeyboardController.#ctor(PCShop.Core.Services.Interfaces.IKeyboardService,PCShop.Core.Services.Interfaces.IClientService,PCShop.Core.Services.Interfaces.IUserService)">
            <summary>
            Constructor of KeyboardController class
            </summary>
            <param name="keyboardService">The IKeyboardService needed for functionality</param>
            <param name="clientService">The IClientService needed for functionality</param>
            <param name="userService">The IUserService needed for functionality</param>
        </member>
        <member name="M:PCShop.Controllers.KeyboardController.Index(PCShop.Core.Models.Keyboard.AllKeyboardsQueryModel)">
            <summary>
            HttpGet action to retrieve all active keyboards according to specified criteria
            </summary>
            <param name="query">The entity that holds the specified criteria</param>
            <returns>Collection of all active keyboards according to specified criteria</returns>
        </member>
        <member name="M:PCShop.Controllers.KeyboardController.Details(System.Int32,System.String)">
            <summary>
            HttpGet action to retrieve detailed information about a specific keyboard
            </summary>
            <param name="id">Keyboard unique identifier</param>
            <param name="information">Keyboard additional information</param>
            <returns>Detailed information about the keyboard</returns>
        </member>
        <member name="M:PCShop.Controllers.KeyboardController.Delete(System.Int32)">
            <summary>
            Action to mark a specific keyboard as deleted
            </summary>
            <param name="id">Keyboard unique identifier</param>
            <returns>Redirection to /Keyboard/Index</returns>
        </member>
        <member name="M:PCShop.Controllers.KeyboardController.Add">
            <summary>
            HttpGet action to return the form for adding a keyboard
            </summary>
            <returns>The form for adding a keyboard</returns>
        </member>
        <member name="M:PCShop.Controllers.KeyboardController.Add(PCShop.Core.Models.Keyboard.KeyboardImportViewModel,System.Nullable{System.Boolean})">
            <summary>
            HttpPost action to add a keyboard
            </summary>
            <param name="model">Keyboard import model</param>
            <param name="radioButton">The value of selected radio button</param>
            <returns>Redirection to /Keyboard/Details</returns>
        </member>
        <member name="M:PCShop.Controllers.KeyboardController.Edit(System.Int32)">
            <summary>
            HttpGet action to return the form for editing a keyboard
            </summary>
            <param name="id">Keyboard unique identifier</param>
            <returns>The form for editing a keyboard</returns>
        </member>
        <member name="M:PCShop.Controllers.KeyboardController.Edit(PCShop.Core.Models.Keyboard.KeyboardEditViewModel)">
            <summary>
            HttpPost action to edit a keyboard
            </summary>
            <param name="model">Keyboard import model</param>
            <returns>Redirection to /Keyboard/Details</returns>
        </member>
        <member name="M:PCShop.Controllers.KeyboardController.Mine">
            <summary>
            HttpGet action to retrieve all active keyboard sales of the currently logged in user
            </summary>
            <returns>Collection of all active keyboard sales of the currently logged in user</returns>
        </member>
        <member name="M:PCShop.Controllers.KeyboardController.Buy(System.Int32)">
            <summary>
            HttpGet action to buy a keyboard
            </summary>
            <param name="id">Keyboard unique identifier</param>
            <returns>The corresponding view</returns>
        </member>
        <member name="T:PCShop.Controllers.LaptopController">
            <summary>
            Laptop controller class
            </summary>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.#ctor(PCShop.Core.Services.Interfaces.ILaptopService,PCShop.Core.Services.Interfaces.IClientService,PCShop.Core.Services.Interfaces.IUserService)">
            <summary>
            Constructor of LaptopController class
            </summary>
            <param name="laptopService">The ILaptopService needed for functionality</param>
            <param name="clientService">The IClientService needed for functionality</param>
            <param name="userService">The IUserService needed for functionality</param>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Index(PCShop.Core.Models.Laptop.AllLaptopsQueryModel)">
            <summary>
            HttpGet action to retrieve all active laptops according to specified criteria
            </summary>
            <param name="query">The entity that holds the specified criteria</param>
            <returns>Collection of all active laptops according to specified criteria</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Details(System.Int32,System.String)">
            <summary>
            HttpGet action to retrieve detailed information about a specific laptop
            </summary>
            <param name="id">Laptop unique identifier</param>
            <param name="information">Laptop additional information</param>
            <returns>Detailed information about the laptop</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Delete(System.Int32)">
            <summary>
            Action to mark a specific laptop as deleted
            </summary>
            <param name="id">Laptop unique identifier</param>
            <returns>Redirection to /Laptop/Index</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Add">
            <summary>
            HttpGet action to return the form for adding a laptop
            </summary>
            <returns>The form for adding a laptop</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Add(PCShop.Core.Models.Laptop.LaptopImportViewModel)">
            <summary>
            HttpPost action to add a laptop
            </summary>
            <param name="model">Laptop import model</param>
            <returns>Redirection to /Laptop/Details</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Edit(System.Int32)">
            <summary>
            HttpGet action to return the form for editing a laptop
            </summary>
            <param name="id">Laptop unique identifier</param>
            <returns>The form for editing a laptop</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Edit(PCShop.Core.Models.Laptop.LaptopEditViewModel)">
            <summary>
            HttpPost action to edit a laptop
            </summary>
            <param name="model">Laptop import model</param>
            <returns>Redirection to /Laptop/Details</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Mine">
            <summary>
            HttpGet action to retrieve all active laptop sales of the currently logged in user
            </summary>
            <returns>Collection of all active laptop sales of the currently logged in user</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Buy(System.Int32)">
            <summary>
            HttpGet action to buy a laptop
            </summary>
            <param name="id">Laptop unique identifier</param>
            <returns>The corresponding view</returns>
        </member>
        <member name="T:PCShop.Controllers.MonitorController">
            <summary>
            Monitor controller class
            </summary>
        </member>
        <member name="M:PCShop.Controllers.MonitorController.#ctor(PCShop.Core.Services.Interfaces.IMonitorService,PCShop.Core.Services.Interfaces.IClientService,PCShop.Core.Services.Interfaces.IUserService)">
            <summary>
            Constructor of MonitorController class
            </summary>
            <param name="monitorService">The IMonitorService needed for functionality</param>
            <param name="clientService">The IClientService needed for functionality</param>
            <param name="userService">The IUserService needed for functionality</param>
        </member>
        <member name="M:PCShop.Controllers.MonitorController.Index(PCShop.Core.Models.Monitor.AllMonitorsQueryModel)">
            <summary>
            HttpGet action to retrieve all active monitors according to specified criteria
            </summary>
            <param name="query">The entity that holds the specified criteria</param>
            <returns>Collection of all active monitors according to specified criteria</returns>
        </member>
        <member name="M:PCShop.Controllers.MonitorController.Details(System.Int32,System.String)">
            <summary>
            HttpGet action to retrieve detailed information about a specific monitor
            </summary>
            <param name="id">Monitor unique identifier</param>
            <param name="information">Monitor additional information</param>
            <returns>Detailedinformation about the monitor</returns>
        </member>
        <member name="M:PCShop.Controllers.MonitorController.Delete(System.Int32)">
            <summary>
            Action to mark a specific monitor as deleted
            </summary>
            <param name="id">Monitor unique identifier</param>
            <returns>Redirection to /Monitor/Index</returns>
        </member>
        <member name="M:PCShop.Controllers.MonitorController.Add">
            <summary>
            HttpGet action to return the form for adding a monitor
            </summary>
            <returns>The form for adding a monitor</returns>
        </member>
        <member name="M:PCShop.Controllers.MonitorController.Add(PCShop.Core.Models.Monitor.MonitorImportViewModel)">
            <summary>
            HttpPost action to add a monitor
            </summary>
            <param name="model">Monitor import model</param>
            <returns>Redirection to /Monitor/Details</returns>
        </member>
        <member name="M:PCShop.Controllers.MonitorController.Edit(System.Int32)">
            <summary>
            HttpGet action to return the form for editing a monitor
            </summary>
            <param name="id">Monitor unique identifier</param>
            <returns>The form for editing a monitor</returns>
        </member>
        <member name="M:PCShop.Controllers.MonitorController.Edit(PCShop.Core.Models.Monitor.MonitorEditViewModel)">
            <summary>
            HttpPost action to edit a monitor
            </summary>
            <param name="model">Monitor import model</param>
            <returns>Redirection to /Monitor/Details</returns>
        </member>
        <member name="M:PCShop.Controllers.MonitorController.Mine">
            <summary>
            HttpGet action to retrieve all active monitor sales of the currently logged in user
            </summary>
            <returns>Collection of all active monitor sales of the currently logged in user</returns>
        </member>
        <member name="M:PCShop.Controllers.MonitorController.Buy(System.Int32)">
            <summary>
            HttpGet action to buy a monitor
            </summary>
            <param name="id">Monitor unique identifier</param>
            <returns>The corresponding view</returns>
        </member>
        <member name="T:PCShop.Controllers.MouseController">
            <summary>
            Mouse controller class
            </summary>
        </member>
        <member name="M:PCShop.Controllers.MouseController.#ctor(PCShop.Core.Services.Interfaces.IMouseService)">
            <summary>
            Constructor of MouseController class
            </summary>
            <param name="mouseService">The IMouseService needed for functionality</param>
        </member>
        <member name="M:PCShop.Controllers.MouseController.Index(PCShop.Core.Models.Mouse.AllMiceQueryModel)">
            <summary>
            HttpGet action to retrieve all active mice according to specified criteria
            </summary>
            <param name="query">The entity that holds the specified criteria</param>
            <returns>Collection of all active mice according to specified criteria</returns>
        </member>
        <member name="M:PCShop.Controllers.MouseController.Details(System.Int32,System.String)">
            <summary>
            HttpGet action to retrieve detailed information about a specific mouse
            </summary>
            <param name="id">Mouse unique identifier</param>
            <param name="information">Mouse additional information</param>
            <returns>Detailed information about the mouse</returns>
        </member>
        <member name="T:PCShop.Extensions.ModelExtensions">
            <summary>
            ModelExtensions model
            </summary>
        </member>
        <member name="M:PCShop.Extensions.ModelExtensions.GetInformation(PCShop.Core.Models.IProductModel)">
            <summary>
            Extension method for getting additional information for the product
            </summary>
            <param name="productModel">The IProductModel that will be extended</param>
            <returns>A string that contains information about the product</returns>
        </member>
        <member name="T:PCShop.ModelBinders.DecimalModelBinder">
            <summary>
            Custom decimal model binder
            </summary>
        </member>
        <member name="M:PCShop.ModelBinders.DecimalModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            Method that attempts to bind a model
            </summary>
            <param name="bindingContext">The Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext</param>
            <returns>A System.Threading.Tasks.Task which will complete when the model binding process completes. If model binding was successful, Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Result will be set to a value returned from Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.Success(System.Object).</returns>
        </member>
        <member name="T:PCShop.ModelBinders.DecimalModelBinderProvider">
            <summary>
            Custom decimal model binder provider
            </summary>
        </member>
        <member name="M:PCShop.ModelBinders.DecimalModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)">
            <summary>
            Creates a DecimalModelBinder based on ModelBinderProviderContext
            </summary>
            <param name="context">The ModelBinderProviderContext</param>
            <returns>A DecimalModelBinder</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when ModelBinderProviderContext is null</exception>
        </member>
        <member name="T:PCShop.ModelBinders.DoubleModelBinder">
            <summary>
            Custom double model binder
            </summary>
        </member>
        <member name="M:PCShop.ModelBinders.DoubleModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            Method that attempts to bind a model
            </summary>
            <param name="bindingContext">The Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext</param>
            <returns>A System.Threading.Tasks.Task which will complete when the model binding process completes. If model binding was successful, Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Result will be set to a value returned from Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.Success(System.Object).</returns>
        </member>
        <member name="T:PCShop.ModelBinders.DoubleModelBinderProvider">
            <summary>
            Custom decimal model binder provider
            </summary>
        </member>
        <member name="M:PCShop.ModelBinders.DoubleModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)">
            <summary>
            Creates a DoubleModelBinder based on ModelBinderProviderContext
            </summary>
            <param name="context">The ModelBinderProviderContext</param>
            <returns>A DoubleModelBinder</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when ModelBinderProviderContext is null</exception>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions">
            <summary>
            ApplicationBuilderExtensions model
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.SeedAdmin(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Extension method for adding admin user to the Administrator role
            </summary>
            <param name="app">The IApplicationBuilder that will be extended</param>
            <returns>Extended IApplicationBuilder</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.SeedSuperUser(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Extension method for adding superUser user to the SuperUser role
            </summary>
            <param name="app">The IApplicationBuilder that will be extended</param>
            <returns>Extended IApplicationBuilder</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.PCShopServiceCollectionExtension">
            <summary>
            PCShopServiceCollectionExtension model
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.PCShopServiceCollectionExtension.AddApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Extension method for adding services to the IoC container
            </summary>
            <param name="services">The IServiceCollection that will be extended</param>
            <returns>Extended IServiceCollection</returns>
        </member>
        <member name="T:System.Security.Claims.ClaimsPrincipalExtension">
            <summary>
            ClaimsPrincipalExtension model
            </summary>
        </member>
        <member name="M:System.Security.Claims.ClaimsPrincipalExtension.Id(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Extension method for getting ClaimsPrincipal's unique identifier
            </summary>
            <param name="user">The ClaimsPrincipal that will be extended</param>
            <returns>ClaimsPrincipal's unique identifier</returns>
        </member>
    </members>
</doc>
