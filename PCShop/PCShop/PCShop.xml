<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCShop</name>
    </assembly>
    <members>
        <member name="T:PCShop.Controllers.AccountController">
            <summary>
            Account controller class
            </summary>
        </member>
        <member name="M:PCShop.Controllers.AccountController.#ctor(Microsoft.AspNetCore.Identity.UserManager{PCShop.Infrastructure.Data.Models.Account.User},Microsoft.AspNetCore.Identity.SignInManager{PCShop.Infrastructure.Data.Models.Account.User})">
            <summary>
            Constructor of AccountController class
            </summary>
            <param name="userManager">The UserManager<c>User</c></param>
            <param name="signInManager">The SignInManager<c>User</c></param>
        </member>
        <member name="M:PCShop.Controllers.AccountController.SignUp">
            <summary>
            HttpGet action for signing up
            </summary>
            <returns>A page that contains a form that must be filled</returns>
        </member>
        <member name="M:PCShop.Controllers.AccountController.SignUp(PCShop.Core.Models.User.SignUpViewModel)">
            <summary>
            HttpPost action for signing up
            </summary>
            <param name="model">The model that is filled by the user</param>
            <returns>If the model is valid creates the user, signs in the user and returns the home page. If there is an error returns the model</returns>
        </member>
        <member name="M:PCShop.Controllers.AccountController.SignIn(System.String)">
            <summary>
            HttpGet action for signing in
            </summary>
            <returns>A page that contains a form that must be filled</returns>
        </member>
        <member name="M:PCShop.Controllers.AccountController.SignIn(PCShop.Core.Models.User.SignInViewModel)">
            <summary>
            HttpPost action for signing in
            </summary>
            <param name="model">The model that is filled by the user</param>
            <returns>If the model is valid signs in the user, then returns the required page or the home page. If there is an error returns the model</returns>
        </member>
        <member name="M:PCShop.Controllers.AccountController.Signout">
            <summary>
            Action for signing out
            </summary>
            <returns>The home page</returns>
        </member>
        <member name="M:PCShop.Controllers.AccountController.AddUsersToRolesInitial">
            <summary>
            Initial action for adding users to corresponding roles
            </summary>
            <returns>The home page</returns>
        </member>
        <member name="T:PCShop.Controllers.HomeController">
            <summary>
            Home controller class
            </summary>
        </member>
        <member name="M:PCShop.Controllers.HomeController.Index">
            <summary>
            Action that returns the home page
            </summary>
            <returns>The home page</returns>
        </member>
        <member name="T:PCShop.Controllers.LaptopController">
            <summary>
            Laptop controller class
            </summary>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.#ctor(PCShop.Core.Services.Interfaces.ILaptopService)">
            <summary>
            Constructor of LaptopController class
            </summary>
            <param name="laptopService">The ILaptopService needed for functionality</param>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Index">
            <summary>
            HttpGet action to retrieve all active laptops
            </summary>
            <returns>Collection of all laptops</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Details(System.Int32)">
            <summary>
            HttpGet action to retrieve detailed information about a specific laptop
            </summary>
            <param name="id">Laptop unique identifier</param>
            <returns>Detailed information about the laptop</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Delete(System.Int32)">
            <summary>
            Action to mark a specific laptop as deleted
            </summary>
            <param name="id">Laptop unique identifier</param>
            <returns>Redirection to /Laptop/Index</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Add">
            <summary>
            HttpGet action to return the form for adding a laptop
            </summary>
            <returns>The form for adding a laptop</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Add(PCShop.Core.Models.Laptop.LaptopImportViewModel)">
            <summary>
            HttpPost action to add a laptop
            </summary>
            <param name="model">Laptop import model</param>
            <returns>Redirection to /Laptop/Details</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Edit(System.Int32)">
            <summary>
            HttpGet action to return the form for editing a laptop
            </summary>
            <param name="id">Laptop unique identifier</param>
            <returns>The form for editing a laptop</returns>
        </member>
        <member name="M:PCShop.Controllers.LaptopController.Edit(PCShop.Core.Models.Laptop.LaptopEditViewModel)">
            <summary>
            HttpPost action to edit a laptop
            </summary>
            <param name="model">Laptop import model</param>
            <returns>Redirection to /Laptop/Details</returns>
        </member>
        <member name="T:PCShop.Extensions.ClaimsPrincipalExtension">
            <summary>
            ClaimsPrincipalExtension model
            </summary>
        </member>
        <member name="M:PCShop.Extensions.ClaimsPrincipalExtension.Id(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Extension method for getting ClaimsPrincipal's unique identifier
            </summary>
            <param name="user">ClaimsPrincipal that will be extended</param>
            <returns>ClaimsPrincipal's unique identifier</returns>
        </member>
        <member name="T:PCShop.ModelBinders.DecimalModelBinder">
            <summary>
            Custom decimal model binder
            </summary>
        </member>
        <member name="M:PCShop.ModelBinders.DecimalModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            Method that attempts to bind a model
            </summary>
            <param name="bindingContext">The Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext</param>
            <returns>A System.Threading.Tasks.Task which will complete when the model binding process completes. If model binding was successful, Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Result will be set to a value returned from Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.Success(System.Object).</returns>
        </member>
        <member name="T:PCShop.ModelBinders.DecimalModelBinderProvider">
            <summary>
            Custom decimal model binder provider
            </summary>
        </member>
        <member name="M:PCShop.ModelBinders.DecimalModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)">
            <summary>
            Creates a DecimalModelBinder based on ModelBinderProviderContext
            </summary>
            <param name="context">The ModelBinderProviderContext</param>
            <returns>A DecimalModelBinder</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when ModelBinderProviderContext is null</exception>
        </member>
        <member name="T:PCShop.ModelBinders.DoubleModelBinder">
            <summary>
            Custom double model binder
            </summary>
        </member>
        <member name="M:PCShop.ModelBinders.DoubleModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            Method that attempts to bind a model
            </summary>
            <param name="bindingContext">The Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext</param>
            <returns>A System.Threading.Tasks.Task which will complete when the model binding process completes. If model binding was successful, Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Result will be set to a value returned from Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.Success(System.Object).</returns>
        </member>
        <member name="T:PCShop.ModelBinders.DoubleModelBinderProvider">
            <summary>
            Custom decimal model binder provider
            </summary>
        </member>
        <member name="M:PCShop.ModelBinders.DoubleModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)">
            <summary>
            Creates a DoubleModelBinder based on ModelBinderProviderContext
            </summary>
            <param name="context">The ModelBinderProviderContext</param>
            <returns>A DoubleModelBinder</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when ModelBinderProviderContext is null</exception>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.PCShopServiceCollectionExtension">
            <summary>
            PCShopServiceCollectionExtension model
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.PCShopServiceCollectionExtension.AddApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Extension method for adding services to the IoC container
            </summary>
            <param name="services">IServiceCollection that will be extended</param>
            <returns>Extended IServiceCollection</returns>
        </member>
    </members>
</doc>
