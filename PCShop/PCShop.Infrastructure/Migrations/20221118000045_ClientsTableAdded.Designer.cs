// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCShop.Infrastructure.Data;

#nullable disable

namespace PCShop.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221118000045_ClientsTableAdded")]
    partial class ClientsTableAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "389271c7-6194-48d3-8402-7b1b28430a42",
                            ConcurrencyStamp = "daa28100-a397-4e03-819e-cbd1144e6882",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "1b99a7a0-ca76-495f-9dff-2c486a558005",
                            ConcurrencyStamp = "5ae91a61-98a3-431c-a265-473f8d98e12e",
                            Name = "SuperUser",
                            NormalizedName = "SUPERUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "19512f55-7aa0-4707-b60d-6588f20c2ab1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73fd1597-f8ce-4977-b642-c799f2b19505",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin-FN",
                            LastName = "Admin-LN",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEETtdzH7pRzOfrmIimf/5OSNzr5o3p/qjV2ankLrvIGKRjH9HDmaNdUajH+2Hp2gvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea4ffc4a-9f73-4691-85e3-31e7fb348365",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "fdf4e641-9248-44d4-8d23-ca09ad4ad793",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c2eeae8-9ecf-4546-8b38-98318678c3da",
                            Email = "superUser@mail.com",
                            EmailConfirmed = false,
                            FirstName = "SuperUser-FN",
                            LastName = "SuperUser-LN",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERUSER@MAIL.COM",
                            NormalizedUserName = "SUPERUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEGB20bsUVQoF9XFgTk8+WR734LFBH2T/2knO+N6SvnVtj17LiomhAP3NtI4IwHu08w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57f3367f-68a6-4f2f-90e4-ab8774520de2",
                            TwoFactorEnabled = false,
                            UserName = "superUser"
                        },
                        new
                        {
                            Id = "b3b38c01-9e6d-4faf-83d5-e0ec48d26115",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76789368-c871-4ac9-bcff-145cbbc29829",
                            Email = "user@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User-FN",
                            LastName = "User-LN",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@MAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBsl4EiXI0i9l3zHU12QBj70IFkLxmGXBGLgi+6CYT9KHE0QFmFtd7LxEqNjA0RCJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11b585f9-7fb2-4358-be13-96662ec8ec78",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountOfPurchases")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountOfPurchases = 7,
                            UserId = "fdf4e641-9248-44d4-8d23-ca09ad4ad793"
                        });
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.CPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CPUs");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplayCoverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("DisplayCoverages");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplaySize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DisplaySizes");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplayTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("DisplayTechnologies");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Format", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.RAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RAMs");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.RefreshRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RefreshRates");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Resolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Resolutions");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Sensitivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Sensitivities");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.SSDCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SSDCapacities");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.VideoCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("VideoCards");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Headphone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<bool>("HasMicrophone")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Headphones");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Keyboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int?>("FormatId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FormatId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Keyboards");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Laptop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayCoverageId")
                        .HasColumnType("int");

                    b.Property<int>("DisplaySizeId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayTechnologyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RAMId")
                        .HasColumnType("int");

                    b.Property<int?>("ResolutionId")
                        .HasColumnType("int");

                    b.Property<int>("SSDCapacityId")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("VideoCardId")
                        .HasColumnType("int");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CPUId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DisplayCoverageId");

                    b.HasIndex("DisplaySizeId");

                    b.HasIndex("DisplayTechnologyId");

                    b.HasIndex("RAMId");

                    b.HasIndex("ResolutionId");

                    b.HasIndex("SSDCapacityId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TypeId");

                    b.HasIndex("VideoCardId");

                    b.ToTable("Laptops");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Microphone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("SellerId");

                    b.ToTable("Microphones");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Monitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayCoverageId")
                        .HasColumnType("int");

                    b.Property<int>("DisplaySizeId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayTechnologyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RefreshRateId")
                        .HasColumnType("int");

                    b.Property<int>("ResolutionId")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DisplayCoverageId");

                    b.HasIndex("DisplaySizeId");

                    b.HasIndex("DisplayTechnologyId");

                    b.HasIndex("RefreshRateId");

                    b.HasIndex("ResolutionId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Mouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("SensitivityId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SensitivityId");

                    b.HasIndex("TypeId");

                    b.ToTable("Mice");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PCShop.Infrastructure.Data.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PCShop.Infrastructure.Data.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PCShop.Infrastructure.Data.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Client", b =>
                {
                    b.HasOne("PCShop.Infrastructure.Data.Models.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Headphone", b =>
                {
                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Brand", "Brand")
                        .WithMany("BrandHeadphones")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Color", "Color")
                        .WithMany("ColorHeadphones")
                        .HasForeignKey("ColorId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.Client", "Seller")
                        .WithMany("Headphones")
                        .HasForeignKey("SellerId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Type", "Type")
                        .WithMany("TypeHeadphones")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("Seller");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Keyboard", b =>
                {
                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Brand", "Brand")
                        .WithMany("BrandKeyboards")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Color", "Color")
                        .WithMany("ColorKeyboards")
                        .HasForeignKey("ColorId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Format", "Format")
                        .WithMany("FormatKeyboards")
                        .HasForeignKey("FormatId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.Client", "Seller")
                        .WithMany("Keyboards")
                        .HasForeignKey("SellerId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Type", "Type")
                        .WithMany("TypeKeyboards")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("Format");

                    b.Navigation("Seller");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Laptop", b =>
                {
                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Brand", "Brand")
                        .WithMany("BrandLaptops")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.CPU", "CPU")
                        .WithMany("CPULaptops")
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Color", "Color")
                        .WithMany("ColorLaptops")
                        .HasForeignKey("ColorId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplayCoverage", "DisplayCoverage")
                        .WithMany("DisplayCoverageLaptops")
                        .HasForeignKey("DisplayCoverageId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplaySize", "DisplaySize")
                        .WithMany("DisplaySizeLaptops")
                        .HasForeignKey("DisplaySizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplayTechnology", "DisplayTechnology")
                        .WithMany("DisplayTechnologyLaptops")
                        .HasForeignKey("DisplayTechnologyId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.RAM", "RAM")
                        .WithMany("RAMLaptops")
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Resolution", "Resolution")
                        .WithMany("ResolutionLaptops")
                        .HasForeignKey("ResolutionId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.SSDCapacity", "SSDCapacity")
                        .WithMany("SSDCapacityLaptops")
                        .HasForeignKey("SSDCapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.Client", "Seller")
                        .WithMany("Laptops")
                        .HasForeignKey("SellerId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Type", "Type")
                        .WithMany("TypeLaptops")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.VideoCard", "VideoCard")
                        .WithMany("VideoCardLaptops")
                        .HasForeignKey("VideoCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("CPU");

                    b.Navigation("Color");

                    b.Navigation("DisplayCoverage");

                    b.Navigation("DisplaySize");

                    b.Navigation("DisplayTechnology");

                    b.Navigation("RAM");

                    b.Navigation("Resolution");

                    b.Navigation("SSDCapacity");

                    b.Navigation("Seller");

                    b.Navigation("Type");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Microphone", b =>
                {
                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Brand", "Brand")
                        .WithMany("BrandMicrophones")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Color", "Color")
                        .WithMany("ColorMicrophones")
                        .HasForeignKey("ColorId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.Client", "Seller")
                        .WithMany("Microphones")
                        .HasForeignKey("SellerId");

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Monitor", b =>
                {
                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Brand", "Brand")
                        .WithMany("BrandMonitors")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Color", "Color")
                        .WithMany("ColorMonitors")
                        .HasForeignKey("ColorId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplayCoverage", "DisplayCoverage")
                        .WithMany("DisplayCoverageMonitors")
                        .HasForeignKey("DisplayCoverageId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplaySize", "DisplaySize")
                        .WithMany("DisplaySizeMonitors")
                        .HasForeignKey("DisplaySizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplayTechnology", "DisplayTechnology")
                        .WithMany("DisplayTechnologyMonitors")
                        .HasForeignKey("DisplayTechnologyId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.RefreshRate", "RefreshRate")
                        .WithMany("RefreshRateMonitors")
                        .HasForeignKey("RefreshRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Resolution", "Resolution")
                        .WithMany("ResolutionMonitors")
                        .HasForeignKey("ResolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.Client", "Seller")
                        .WithMany("Monitors")
                        .HasForeignKey("SellerId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Type", "Type")
                        .WithMany("TypeMonitors")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("DisplayCoverage");

                    b.Navigation("DisplaySize");

                    b.Navigation("DisplayTechnology");

                    b.Navigation("RefreshRate");

                    b.Navigation("Resolution");

                    b.Navigation("Seller");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Mouse", b =>
                {
                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Brand", "Brand")
                        .WithMany("BrandMice")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Color", "Color")
                        .WithMany("ColorMice")
                        .HasForeignKey("ColorId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.Client", "Seller")
                        .WithMany("Mice")
                        .HasForeignKey("SellerId");

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Sensitivity", "Sensitivity")
                        .WithMany("SensitivityMice")
                        .HasForeignKey("SensitivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Infrastructure.Data.Models.GravitatingClasses.Type", "Type")
                        .WithMany("TypeMice")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("Seller");

                    b.Navigation("Sensitivity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.Client", b =>
                {
                    b.Navigation("Headphones");

                    b.Navigation("Keyboards");

                    b.Navigation("Laptops");

                    b.Navigation("Mice");

                    b.Navigation("Microphones");

                    b.Navigation("Monitors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Brand", b =>
                {
                    b.Navigation("BrandHeadphones");

                    b.Navigation("BrandKeyboards");

                    b.Navigation("BrandLaptops");

                    b.Navigation("BrandMice");

                    b.Navigation("BrandMicrophones");

                    b.Navigation("BrandMonitors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Color", b =>
                {
                    b.Navigation("ColorHeadphones");

                    b.Navigation("ColorKeyboards");

                    b.Navigation("ColorLaptops");

                    b.Navigation("ColorMice");

                    b.Navigation("ColorMicrophones");

                    b.Navigation("ColorMonitors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.CPU", b =>
                {
                    b.Navigation("CPULaptops");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplayCoverage", b =>
                {
                    b.Navigation("DisplayCoverageLaptops");

                    b.Navigation("DisplayCoverageMonitors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplaySize", b =>
                {
                    b.Navigation("DisplaySizeLaptops");

                    b.Navigation("DisplaySizeMonitors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.DisplayTechnology", b =>
                {
                    b.Navigation("DisplayTechnologyLaptops");

                    b.Navigation("DisplayTechnologyMonitors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Format", b =>
                {
                    b.Navigation("FormatKeyboards");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.RAM", b =>
                {
                    b.Navigation("RAMLaptops");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.RefreshRate", b =>
                {
                    b.Navigation("RefreshRateMonitors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Resolution", b =>
                {
                    b.Navigation("ResolutionLaptops");

                    b.Navigation("ResolutionMonitors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Sensitivity", b =>
                {
                    b.Navigation("SensitivityMice");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.SSDCapacity", b =>
                {
                    b.Navigation("SSDCapacityLaptops");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.Type", b =>
                {
                    b.Navigation("TypeHeadphones");

                    b.Navigation("TypeKeyboards");

                    b.Navigation("TypeLaptops");

                    b.Navigation("TypeMice");

                    b.Navigation("TypeMonitors");
                });

            modelBuilder.Entity("PCShop.Infrastructure.Data.Models.GravitatingClasses.VideoCard", b =>
                {
                    b.Navigation("VideoCardLaptops");
                });
#pragma warning restore 612, 618
        }
    }
}
