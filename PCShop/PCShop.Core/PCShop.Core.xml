<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCShop.Core</name>
    </assembly>
    <members>
        <member name="T:PCShop.Core.Constants.Constant">
            <summary>
            Class holding constants
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.UserConstants">
            <summary>
            Class holding User constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.UserConstants.FirstNameMinLength">
            <summary>
            Constant for the min length of user's first name
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.UserConstants.LastNameMinLength">
            <summary>
            Constant for the min length of user's last name
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.UserConstants.UsernameMinLength">
            <summary>
            Constant for the min length of user's username
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.UserConstants.EmailMinLength">
            <summary>
            Constant for the min length of user's email
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.UserConstants.PasswordMinLength">
            <summary>
            Constant for the min length of user's password
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.UserConstants.PasswordMaxLength">
            <summary>
            Constant for the max length of user's password
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.BrandConstants">
            <summary>
            Class holding Brand constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.BrandConstants.BrandNameMinLength">
            <summary>
            Constant for the min length of brand's name
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.ColorConstants">
            <summary>
            Class holding Color constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ColorConstants.ColorNameMinLength">
            <summary>
            Constant for the min length of color's name
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.CPUConstants">
            <summary>
            Class holding CPU constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.CPUConstants.CPUNameMinLength">
            <summary>
            Constant for the min length of CPU's name
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.DisplayCoverageConstants">
            <summary>
            Class holding DisplayCoverage constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.DisplayCoverageConstants.DisplayCoverageNameMinLength">
            <summary>
            Constant for the min length of displayCoverage's name
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.DisplayTechnologyConstants">
            <summary>
            Class holding DisplayTechnology constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.DisplayTechnologyConstants.DisplayTechnologyNameMinLength">
            <summary>
            Constant for the min length of displayTechnology's name
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.FormatConstants">
            <summary>
            Class holding Format constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.FormatConstants.FormatNameMinLength">
            <summary>
            Constant for the min length of format's name
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.ResolutionConstants">
            <summary>
            Class holding Resolution constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ResolutionConstants.ResolutionValueMinLength">
            <summary>
            Constant for the min length of resolution's value string
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.SensitivityConstants">
            <summary>
            Class holding Sensitivity constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.SensitivityConstants.SensitivityRangeMinLength">
            <summary>
            Constant for the min length of sensitivity's range string
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.TypeConstants">
            <summary>
            Class holding Type constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.TypeConstants.TypeNameMinLength">
            <summary>
            Constant for the min length of type's name
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.VideoCardConstants">
            <summary>
            Class holding VideoCard constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.VideoCardConstants.VideoCardNameMinLength">
            <summary>
            Constant for the min length of videoCard's name
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.LaptopConstants">
            <summary>
            Class holding Laptop constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.LaptopConstants.RAMMinValue">
            <summary>
            Constant for the min value of laptop's RAM
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.LaptopConstants.RAMMaxValue">
            <summary>
            Constant for the max value of laptop's RAM
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.LaptopConstants.SSDCapacityMinValue">
            <summary>
            Constant for the min value of laptop's SSD capacity
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.LaptopConstants.SSDCapacityMaxValue">
            <summary>
            Constant for the max value of laptop's SSD capacity
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.ProductConstants">
            <summary>
            Class holding constants for all product types
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.QuantityMinValue">
            <summary>
            Constant for the min value of product's quantity
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.QuantityMaxValue">
            <summary>
            Constant for the max value of product's quantity
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.WarrantyMinValue">
            <summary>
            Constant for the min value of product's warranty
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.WarrantyMaxValue">
            <summary>
            Constant for the max value of product's warranty
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.IntegerErrorMessage">
            <summary>
            Constant for the error message of product's integer property
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.ErrorMessageForDeletedProduct">
            <summary>
            Constant for the error message of a deleted product
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.ErrorMessageForProductThatIsOutOfStock">
            <summary>
            Constant for the error message of a product that is out of stock
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.ErrorMessageForUnselectedOption">
            <summary>
            Constant for the error message when no option is selected
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.ErrorMessageForNotExistingValue">
            <summary>
            Constant for the error message of a not existing value
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.ProductsPerPage">
            <summary>
            Constant for the number of products displayed on one page
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.ErrorMessageForInvalidProductId">
            <summary>
            Constant for the error message of invalid product unique identifier
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.ProductSuccessfullyAdded">
            <summary>
            Constant for the TempData message for a successfully added product
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.ProductSuccessfullyEdited">
            <summary>
            Constant for the TempData message for a successfully edited product
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ProductConstants.ProductSuccessfullyDeleted">
            <summary>
            Constant for the TempData message for a successfully deleted product
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.ClientConstants">
            <summary>
            Class holding Client constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ClientConstants.MaxNumberOfAllowedSales">
            <summary>
            Constant for the max number of allowed active sales
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ClientConstants.ErrorMessageForInvalidUserId">
            <summary>
            Constant for the error message of invalid User unique identifier
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.ClientConstants.RequiredNumberOfPurchasesToBeSuperUser">
            <summary>
            Constant for the required number of purchases a client must make to become a SuperUser
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.MonitorConstants">
            <summary>
            Class holding Monitor constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.MonitorConstants.RefreshRateMinValue">
            <summary>
            Constant for the min value of monitor's refresh rate
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.MonitorConstants.RefreshRateMaxValue">
            <summary>
            Constant for the max value of monitor's refresh rate
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Constant.GlobalConstants">
            <summary>
            Class holding global constants
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.GlobalConstants.TempDataMessage">
            <summary>
            Constant for the TempData key
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.GlobalConstants.UnknownCharacteristic">
            <summary>
            Constant for unknown characteristic
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.GlobalConstants.ErrorCommonViewName">
            <summary>
            Constant for the view name for a common error
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.GlobalConstants.Error401ViewName">
            <summary>
            Constant for the view name for error 401
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.GlobalConstants.Error404ViewName">
            <summary>
            Constant for the view name for error 404
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.GlobalConstants.AddNotAllowedViewName">
            <summary>
            Constant for the view name for a not allowed addition
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.GlobalConstants.PromoteToSuperUserViewName">
            <summary>
            Constant for the view name for a promotion to superUser
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Constant.GlobalConstants.PurchaseMadeViewName">
            <summary>
            Constant for the view name for a successful purchase
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Sorting">
            <summary>
            An enumeration of product sortings
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Sorting.Newest">
            <summary>
            Enum value for sorting by the date of addition
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Sorting.Brand">
            <summary>
            Enum value for sorting by the brand name
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Sorting.PriceMinToMax">
            <summary>
            Enum value for sorting by price (min first, max last)
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Sorting.PriceMaxToMin">
            <summary>
            Enum value for sorting by price (max first, min last)
            </summary>
        </member>
        <member name="T:PCShop.Core.Constants.Wireless">
            <summary>
            An enumeration of product connectivity
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Wireless.Regardless">
            <summary>
            Enum value for all products (regardless of their connectivity)
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Wireless.No">
            <summary>
            Enum value for wired products
            </summary>
        </member>
        <member name="F:PCShop.Core.Constants.Wireless.Yes">
            <summary>
            Enum value for wireless products
            </summary>
        </member>
        <member name="T:PCShop.Core.Exceptions.Guard">
            <summary>
            Guard model
            </summary>
        </member>
        <member name="M:PCShop.Core.Exceptions.Guard.AgainstInvalidUserId``1(``0,System.String)">
            <summary>
            Method that will throw a PCShopException when the given value is null
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">The value that will be checked for null</param>
            <param name="errorMessage">The error message that will be attached to the PCShopException</param>
        </member>
        <member name="M:PCShop.Core.Exceptions.Guard.AgainstNullOrEmptyCollection``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Method that will throw an ArgumentException when the given collection is null or empty
            </summary>
            <typeparam name="T">Type of the elements in the collection</typeparam>
            <param name="collection">The collection that will be checked</param>
            <param name="errorMessage">The error message that will be attached to the ArgumentException</param>
        </member>
        <member name="M:PCShop.Core.Exceptions.Guard.AgainstProductThatIsNull``1(``0,System.String)">
            <summary>
            Method that will throw an ArgumentException when the given value is null
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">The value that will be checked for null</param>
            <param name="errorMessage">The error message that will be attached to the ArgumentException</param>
        </member>
        <member name="M:PCShop.Core.Exceptions.Guard.AgainstProductThatIsDeleted(System.Boolean,System.String)">
            <summary>
            Method that will throw an ArgumentException when the given boolean is true
            </summary>
            <param name="isDeleted">The boolean that will be checked</param>
            <param name="errorMessage">The error message that will be attached to the ArgumentException</param>
        </member>
        <member name="M:PCShop.Core.Exceptions.Guard.AgainstProductThatIsOutOfStock(System.Int32,System.String)">
            <summary>
            Method that will throw an ArgumentException when the given quantity is zero
            </summary>
            <param name="quantity">The quantity that will be checked</param>
            <param name="errorMessage">The error message that will be attached to the ArgumentException</param>
        </member>
        <member name="M:PCShop.Core.Exceptions.Guard.AgainstNotExistingValue``1(``0,System.String)">
            <summary>
            Method that will throw an ArgumentException when the given value is null
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">The value that will be checked for null</param>
            <param name="errorMessage">The error message that will be attached to the ArgumentException</param>
        </member>
        <member name="T:PCShop.Core.Exceptions.IGuard">
            <summary>
            Abstraction of Guard
            </summary>
        </member>
        <member name="M:PCShop.Core.Exceptions.IGuard.AgainstInvalidUserId``1(``0,System.String)">
            <summary>
            Method that will throw a PCShopException when the given value is null
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">The value that will be checked for null</param>
            <param name="errorMessage">The error message that will be attached to the PCShopException</param>
        </member>
        <member name="M:PCShop.Core.Exceptions.IGuard.AgainstNullOrEmptyCollection``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Method that will throw an ArgumentException when the given collection is null or empty
            </summary>
            <typeparam name="T">Type of the elements in the collection</typeparam>
            <param name="collection">The collection that will be checked</param>
            <param name="errorMessage">The error message that will be attached to the ArgumentException</param>
        </member>
        <member name="M:PCShop.Core.Exceptions.IGuard.AgainstProductThatIsDeleted(System.Boolean,System.String)">
            <summary>
            Method that will throw an ArgumentException when the given boolean is true
            </summary>
            <param name="isDeleted">The boolean that will be checked</param>
            <param name="errorMessage">The error message that will be attached to the ArgumentException</param>
        </member>
        <member name="M:PCShop.Core.Exceptions.IGuard.AgainstProductThatIsOutOfStock(System.Int32,System.String)">
            <summary>
            Method that will throw an ArgumentException when the given quantity is zero
            </summary>
            <param name="quantity">The quantity that will be checked</param>
            <param name="errorMessage">The error message that will be attached to the ArgumentException</param>
        </member>
        <member name="M:PCShop.Core.Exceptions.IGuard.AgainstProductThatIsNull``1(``0,System.String)">
            <summary>
            Method that will throw an ArgumentException when the given value is null
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">The value that will be checked for null</param>
            <param name="errorMessage">The error message that will be attached to the ArgumentException</param>
        </member>
        <member name="M:PCShop.Core.Exceptions.IGuard.AgainstNotExistingValue``1(``0,System.String)">
            <summary>
            Method that will throw an ArgumentException when the given value is null
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">The value that will be checked for null</param>
            <param name="errorMessage">The error message that will be attached to the ArgumentException</param>
        </member>
        <member name="T:PCShop.Core.Exceptions.PCShopException">
            <summary>
            PCShopException model
            </summary>
        </member>
        <member name="M:PCShop.Core.Exceptions.PCShopException.#ctor">
            <summary>
            Constructor of PCShopException class
            </summary>
        </member>
        <member name="M:PCShop.Core.Exceptions.PCShopException.#ctor(System.String)">
            <summary>
            Constructor of PCShopException class
            </summary>
            <param name="errorMessage">The error message that will be attached to the exception</param>
        </member>
        <member name="T:PCShop.Core.Models.Headphone.AllHeadphonesQueryModel">
            <summary>
            AllHeadphonesQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Headphone.AllHeadphonesQueryModel.#ctor">
            <summary>
            Constructor of AllHeadphonesQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.AllHeadphonesQueryModel.Type">
            <summary>
            Property that represents headphone type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.AllHeadphonesQueryModel.Types">
            <summary>
            Property that represents a collection of all possible headphone types
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.AllHeadphonesQueryModel.Wireless">
            <summary>
            Property that represents headphone connectivity
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.AllHeadphonesQueryModel.Headphones">
            <summary>
            Property that represents a collecion of headphones according to specified criteria
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Headphone.HeadphoneDetailsExportViewModel">
            <summary>
            HeadphoneDetailsExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneDetailsExportViewModel.Color">
            <summary>
            Property that represents headphone color
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneDetailsExportViewModel.ImageUrl">
            <summary>
            Property that represents headphone image url
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneDetailsExportViewModel.AddedOn">
            <summary>
            Property that represents the date the headphone was added to the database
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneDetailsExportViewModel.Quantity">
            <summary>
            Property that represents how many headphones are in stock
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneDetailsExportViewModel.Seller">
            <summary>
            Property that represents headphone Seller
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneDetailsExportViewModel.SellerFirstName">
            <summary>
            Property that represents headphone seller first name
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneDetailsExportViewModel.SellerLastName">
            <summary>
            Property that represents headphone seller last name
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Headphone.HeadphoneEditViewModel">
            <summary>
            HeadphoneEditViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneEditViewModel.Id">
            <summary>
            Property that represents headphone unique identifier
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneEditViewModel.Seller">
            <summary>
            Property that represents headphone Seller
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Headphone.HeadphoneExportViewModel">
            <summary>
            HeadphoneExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneExportViewModel.Type">
            <summary>
            Property that represents headphone type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneExportViewModel.IsWireless">
            <summary>
            Property that represents if the headphone is wireless
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneExportViewModel.HasMicrophone">
            <summary>
            Property that represents if the headphone has a microphone
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Headphone.HeadphoneImportViewModel">
            <summary>
            HeadphoneImportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneImportViewModel.Type">
            <summary>
            Property that represents headphone type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneImportViewModel.IsWireless">
            <summary>
            Property that represents if the headphone is wireless
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphoneImportViewModel.HasMicrophone">
            <summary>
            Property that represents if the headphone has a microphone
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Headphone.HeadphonesQueryModel">
            <summary>
            HeadphonesQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Headphone.HeadphonesQueryModel.#ctor">
            <summary>
            Constructor of HeadphonesQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphonesQueryModel.TotalHeadphonesCount">
            <summary>
            Property that represents total count of headphones
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Headphone.HeadphonesQueryModel.Headphones">
            <summary>
            Property that represents a collection of headphones
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.IProductModel">
            <summary>
            Abstraction of ProductModel
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.IProductModel.Brand">
            <summary>
            Property that represents product brand
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.IProductModel.Price">
            <summary>
            Property that represents product price
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Keyboard.AllKeyboardsQueryModel">
            <summary>
            AllKeyboardsQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Keyboard.AllKeyboardsQueryModel.#ctor">
            <summary>
            Constructor of AllKeyboardsQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.AllKeyboardsQueryModel.Format">
            <summary>
            Property that represents keyboard format
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.AllKeyboardsQueryModel.Formats">
            <summary>
            Property that represents a collection of all possible keyboard formats
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.AllKeyboardsQueryModel.Type">
            <summary>
            Property that represents keyboard type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.AllKeyboardsQueryModel.Types">
            <summary>
            Property that represents a collection of all possible keyboard types
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.AllKeyboardsQueryModel.Wireless">
            <summary>
            Property that represents keyboard connectivity
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.AllKeyboardsQueryModel.Keyboards">
            <summary>
            Property that represents a collecion of keyboards according to specified criteria
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Keyboard.KeyboardDetailsExportViewModel">
            <summary>
            KeyboardDetailsExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardDetailsExportViewModel.Color">
            <summary>
            Property that represents keyboard color
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardDetailsExportViewModel.ImageUrl">
            <summary>
            Property that represents keyboard image url
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardDetailsExportViewModel.AddedOn">
            <summary>
            Property that represents the date the keyboard was added to the database
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardDetailsExportViewModel.Quantity">
            <summary>
            Property that represents how many keyboards are in stock
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardDetailsExportViewModel.Seller">
            <summary>
            Property that represents keyboard Seller
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardDetailsExportViewModel.SellerFirstName">
            <summary>
            Property that represents keyboard seller first name
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardDetailsExportViewModel.SellerLastName">
            <summary>
            Property that represents keyboard seller last name
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Keyboard.KeyboardEditViewModel">
            <summary>
            KeyboardEditViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardEditViewModel.Id">
            <summary>
            Property that represents keyboard unique identifier
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardEditViewModel.Seller">
            <summary>
            Property that represents keyboard Seller
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Keyboard.KeyboardExportViewModel">
            <summary>
            LaptopExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardExportViewModel.IsWireless">
            <summary>
            Property that represents if the keyboard is wireless
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardExportViewModel.Type">
            <summary>
            Property that represents keyboard type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardExportViewModel.Format">
            <summary>
            Property that represents keyboard format
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Keyboard.KeyboardImportViewModel">
            <summary>
            KeyboardImportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardImportViewModel.IsWireless">
            <summary>
            Property that represents if the keyboard is wireless
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardImportViewModel.Type">
            <summary>
            Property that represents keyboard type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardImportViewModel.Format">
            <summary>
            Property that represents keyboard format
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Keyboard.KeyboardsQueryModel">
            <summary>
            KeyboardsQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Keyboard.KeyboardsQueryModel.#ctor">
            <summary>
            Constructor of KeyboardsQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardsQueryModel.TotalKeyboardsCount">
            <summary>
            Property that represents total count of keyboards
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Keyboard.KeyboardsQueryModel.Keyboards">
            <summary>
            Property that represents a collection of keyboards
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Laptop.AllLaptopsQueryModel">
            <summary>
            AllLaptopsQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Laptop.AllLaptopsQueryModel.#ctor">
            <summary>
            Constructor of AllLaptopsQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.AllLaptopsQueryModel.Cpu">
            <summary>
            Property that represents laptop CPU model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.AllLaptopsQueryModel.Cpus">
            <summary>
            Property that represents a collection of all possible laptop CPU models
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.AllLaptopsQueryModel.Ram">
            <summary>
            Propeerty that represents laptop RAM
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.AllLaptopsQueryModel.Rams">
            <summary>
            Property that represents a collection of all possible laptop RAMs
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.AllLaptopsQueryModel.SsdCapacity">
            <summary>
            Property that represents laptop SSD capacity
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.AllLaptopsQueryModel.SsdCapacities">
            <summary>
            Property that represents all possible laptop SSD capacities
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.AllLaptopsQueryModel.VideoCard">
            <summary>
            Property that represents laptop video card model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.AllLaptopsQueryModel.VideoCards">
            <summary>
            Property that represents all possible laptop video card models
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.AllLaptopsQueryModel.Laptops">
            <summary>
            Property that represents a collecion of laptops according to specified criteria
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel">
            <summary>
            LaptopDetailsExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.Type">
            <summary>
            Property that represents laptop type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.DisplayCoverage">
            <summary>
            Property that represents laptop display coverage
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.DisplayTechnology">
            <summary>
            Property that represents laptop display technology
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.Resolution">
            <summary>
            Property that represents laptop display resolution
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.Color">
            <summary>
            Property that represents laptop color
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.ImageUrl">
            <summary>
            Property that represents laptop image url
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.AddedOn">
            <summary>
            Property that represents the date the laptop was added to the database
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.Quantity">
            <summary>
            Property that represents how many laptops are in stock
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.Seller">
            <summary>
            Property that represents laptop Seller
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.SellerFirstName">
            <summary>
            Property that represents laptop seller first name
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopDetailsExportViewModel.SellerLastName">
            <summary>
            Property that represents laptop seller last name
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Laptop.LaptopEditViewModel">
            <summary>
            LaptopEditViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopEditViewModel.Id">
            <summary>
            Property that represents laptop unique identifier
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopEditViewModel.Seller">
            <summary>
            Property that represents laptop Seller
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Laptop.LaptopExportViewModel">
            <summary>
            LaptopExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopExportViewModel.CPU">
            <summary>
            Property that represents laptop CPU
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopExportViewModel.RAM">
            <summary>
            Property that represents laptop RAM
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopExportViewModel.SSDCapacity">
            <summary>
            Property that represents laptop SSD capacity
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopExportViewModel.VideoCard">
            <summary>
            Property that represents laptop video card
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopExportViewModel.DisplaySize">
            <summary>
            Property that represents laptop display size
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Laptop.LaptopImportViewModel">
            <summary>
            LaptopImportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopImportViewModel.CPU">
            <summary>
            Property that represents laptop CPU
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopImportViewModel.RAM">
            <summary>
            Property that represents laptop RAM
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopImportViewModel.SSDCapacity">
            <summary>
            Property that represents laptop SSD capacity
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopImportViewModel.VideoCard">
            <summary>
            Property that represents laptop video card
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopImportViewModel.DisplaySize">
            <summary>
            Property that represents laptop display size
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopImportViewModel.Type">
            <summary>
            Property that represents laptop type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopImportViewModel.DisplayCoverage">
            <summary>
            Property that represents laptop display coverage
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopImportViewModel.DisplayTechnology">
            <summary>
            Property that represents laptop display technology
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopImportViewModel.Resolution">
            <summary>
            Property that represents laptop display resolution
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Laptop.LaptopsQueryModel">
            <summary>
            LaptopsQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Laptop.LaptopsQueryModel.#ctor">
            <summary>
            Constructor of LaptopsQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopsQueryModel.TotalLaptopsCount">
            <summary>
            Property that represents total count of laptops
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Laptop.LaptopsQueryModel.Laptops">
            <summary>
            Property that represents a collection of laptops
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Microphone.AllMicrophonesQueryModel">
            <summary>
            AllMicrophonesQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Microphone.AllMicrophonesQueryModel.#ctor">
            <summary>
            Constructor of AllMicrophonesQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.AllMicrophonesQueryModel.Microphones">
            <summary>
            Property that represents a collecion of microphones according to specified criteria
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Microphone.MicrophoneDetailsExportViewModel">
            <summary>
            MicrophoneDetailsExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophoneDetailsExportViewModel.Color">
            <summary>
            Property that represents microphone color
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophoneDetailsExportViewModel.ImageUrl">
            <summary>
            Property that represents microphone image url
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophoneDetailsExportViewModel.AddedOn">
            <summary>
            Property that represents the date the microphone was added to the database
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophoneDetailsExportViewModel.Quantity">
            <summary>
            Property that represents how many microphones are in stock
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophoneDetailsExportViewModel.Seller">
            <summary>
            Property that represents microphone Seller
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophoneDetailsExportViewModel.SellerFirstName">
            <summary>
            Property that represents microphone seller first name
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophoneDetailsExportViewModel.SellerLastName">
            <summary>
            Property that represents microphone seller last name
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Microphone.MicrophoneEditViewModel">
            <summary>
            MicrophoneEditViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophoneEditViewModel.Id">
            <summary>
            Property that represents microphone unique identifier
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophoneEditViewModel.Seller">
            <summary>
            Property that represents microphone Seller
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Microphone.MicrophoneExportViewModel">
            <summary>
            MicrophoneExportViewModel model
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Microphone.MicrophoneImportViewModel">
            <summary>
            MicrophoneImportViewModel model
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Microphone.MicrophonesQueryModel">
            <summary>
            MicrophonesQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Microphone.MicrophonesQueryModel.#ctor">
            <summary>
            Constructor of MicrophonesQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophonesQueryModel.TotalMicrophonesCount">
            <summary>
            Property that represents total count of microphones
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Microphone.MicrophonesQueryModel.Microphones">
            <summary>
            Property that represents a collection of microphones
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Monitor.AllMonitorsQueryModel">
            <summary>
            AllMonitorsQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Monitor.AllMonitorsQueryModel.#ctor">
            <summary>
            Constructor of AllMonitorsQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.AllMonitorsQueryModel.Brand">
            <summary>
            Property that represents monitor brand
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.AllMonitorsQueryModel.Brands">
            <summary>
            Property that represents a collection of all possible monitor brands
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.AllMonitorsQueryModel.DisplaySize">
            <summary>
            Property that represents monitor display size
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.AllMonitorsQueryModel.DisplaySizes">
            <summary>
            Property that represents a collection of all possible monitor display sizes
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.AllMonitorsQueryModel.Resolution">
            <summary>
            Property that represents monitor resolution
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.AllMonitorsQueryModel.Resolutions">
            <summary>
            Property that represents a collection of all possible monitor resolutions
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.AllMonitorsQueryModel.RefreshRate">
            <summary>
            Property that represents monitorr refresh rate
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.AllMonitorsQueryModel.RefreshRates">
            <summary>
            Property that represents a collection of all possible monitor refresh rates
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.AllMonitorsQueryModel.Monitors">
            <summary>
            Property that represents a collecion of monitors according to specified criteria
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Monitor.MonitorDetailsExportViewModel">
            <summary>
            MonitorDetailsExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorDetailsExportViewModel.Type">
            <summary>
            Property that represents monitor type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorDetailsExportViewModel.Color">
            <summary>
            Property that represents monitor color
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorDetailsExportViewModel.ImageUrl">
            <summary>
            Property that represents monitor image url
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorDetailsExportViewModel.AddedOn">
            <summary>
            Property that represents the date the monitor was added to the database
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorDetailsExportViewModel.Quantity">
            <summary>
            Property that represents how many monitors are in stock
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorDetailsExportViewModel.Seller">
            <summary>
            Property that represents monior Seller
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorDetailsExportViewModel.SellerFirstName">
            <summary>
            Property that represents monitor seller first name
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorDetailsExportViewModel.SellerLastName">
            <summary>
            Property that represents monitor seller last name
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Monitor.MonitorEditViewModel">
            <summary>
            MonitorEditViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorEditViewModel.Id">
            <summary>
            Property that represents monitor unique identifier
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorEditViewModel.Seller">
            <summary>
            Property thaat represents monitor Seller
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Monitor.MonitorExportViewModel">
            <summary>
            MonitorExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorExportViewModel.DisplaySize">
            <summary>
            Property that represents monitor display size
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorExportViewModel.DisplayTechnology">
            <summary>
            Property that represents monitor display technology
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorExportViewModel.Resolution">
            <summary>
            Property that represents monitor resolution
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorExportViewModel.DisplayCoverage">
            <summary>
            Property that represents monitor display coverage
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorExportViewModel.RefreshRate">
            <summary>
            Property that represents monitor refresh rate
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Monitor.MonitorImportViewModel">
            <summary>
            MonitorImportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorImportViewModel.DisplaySize">
            <summary>
            Property that represents monitor display size
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorImportViewModel.Resolution">
            <summary>
            Property that represents monitor display resolution
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorImportViewModel.RefreshRate">
            <summary>
            Property that represents monitor refresh rate
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorImportViewModel.Type">
            <summary>
            Property that represents monitor type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorImportViewModel.DisplayCoverage">
            <summary>
            Property that represents monitor display coverage
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorImportViewModel.DisplayTechnology">
            <summary>
            Property that represents monitor display technology
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Monitor.MonitorsQueryModel">
            <summary>
            MonitorsQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Monitor.MonitorsQueryModel.#ctor">
            <summary>
            Constructor of MonitorsQueryModel
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorsQueryModel.TotalMonitorsCount">
            <summary>
            Property that represents total count of monitors
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Monitor.MonitorsQueryModel.Monitors">
            <summary>
            Property that represents a collection of monitors
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Mouse.AllMiceQueryModel">
            <summary>
            AllMiceQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Mouse.AllMiceQueryModel.#ctor">
            <summary>
            Constructor of AllMiceQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.AllMiceQueryModel.Sensitivity">
            <summary>
            Property that represents mouse sensitivity
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.AllMiceQueryModel.Sensitivities">
            <summary>
            Property that represents a collection of all possible mouse sensitivities
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.AllMiceQueryModel.Type">
            <summary>
            Property that represents mouse type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.AllMiceQueryModel.Types">
            <summary>
            Property that represents a collection of all possible mouse types
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.AllMiceQueryModel.Wireless">
            <summary>
            Property that represents mouse connectivity
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.AllMiceQueryModel.Mice">
            <summary>
            Property that represents a collecion of mice according to specified criteria
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Mouse.MiceQueryModel">
            <summary>
            MiceQueryModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Mouse.MiceQueryModel.#ctor">
            <summary>
            Constructor of MiceQueryModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MiceQueryModel.TotalMiceCount">
            <summary>
            Property that represents total count of mice
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MiceQueryModel.Mice">
            <summary>
            Property that represents a collection of mice
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Mouse.MouseDetailsExportViewModel">
            <summary>
            MouseDetailsExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseDetailsExportViewModel.Color">
            <summary>
            Property that represents mouse color
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseDetailsExportViewModel.ImageUrl">
            <summary>
            Property that represents mouse image url
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseDetailsExportViewModel.AddedOn">
            <summary>
            Property that represents the date the mouse was added to the database
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseDetailsExportViewModel.Quantity">
            <summary>
            Property that represents how many mice are in stock
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseDetailsExportViewModel.Seller">
            <summary>
            Property that represents mouse Seller
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseDetailsExportViewModel.SellerFirstName">
            <summary>
            Property that represents mouse seller first name
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseDetailsExportViewModel.SellerLastName">
            <summary>
            Property that represents mouse seller last name
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Mouse.MouseEditViewModel">
            <summary>
            MouseEditViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseEditViewModel.Id">
            <summary>
            Property that represents mouse unique identifier
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseEditViewModel.Seller">
            <summary>
            Property that represents mouse Seller
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Mouse.MouseExportViewModel">
            <summary>
            MouseExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseExportViewModel.IsWireless">
            <summary>
            Property that represents if the mouse is wireless
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseExportViewModel.Type">
            <summary>
            Property that represents mouse type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseExportViewModel.Sensitivity">
            <summary>
            Property that represents mouse sensitivity
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Mouse.MouseImportViewModel">
            <summary>
            MouseImportViewModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.Mouse.MouseImportViewModel.#ctor">
            <summary>
            Constructor of MouseImportViewModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseImportViewModel.IsWireless">
            <summary>
            Property that represents if the mouse is wireless
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseImportViewModel.Type">
            <summary>
            Property that represents mouse type
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseImportViewModel.Sensitivity">
            <summary>
            Property that represents mouse sensitivity range
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Mouse.MouseImportViewModel.Sensitivities">
            <summary>
            Property that represents a collection of all mouse sensitivity ranges
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Product.AllProductsQueryModel">
            <summary>
            AllProductsQueryModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.AllProductsQueryModel.Keyword">
            <summary>
            Property that represents a search keyword
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.AllProductsQueryModel.Sorting">
            <summary>
            Property that represents a sorting criterion
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.AllProductsQueryModel.CurrentPage">
            <summary>
            Property that represents the number of the current page
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.AllProductsQueryModel.TotalProductsCount">
            <summary>
            Property that represents total count of products
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Product.ProductExportViewModel">
            <summary>
            ProductExportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.ProductExportViewModel.Id">
            <summary>
            Property that represents product unique identifier
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.ProductExportViewModel.Brand">
            <summary>
            Property that represents product brand
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.ProductExportViewModel.Price">
            <summary>
            Property that represents product price
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.ProductExportViewModel.Warranty">
            <summary>
            Property that represents product warranty
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.Product.ProductImportViewModel">
            <summary>
            ProductImportViewModel model
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.ProductImportViewModel.Brand">
            <summary>
            Property that represents product brand
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.ProductImportViewModel.Quantity">
            <summary>
            Property that represents products count
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.ProductImportViewModel.Price">
            <summary>
            Property that represents product price
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.ProductImportViewModel.Warranty">
            <summary>
            Property that represents product warranty
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.ProductImportViewModel.Color">
            <summary>
            Property that represents product color
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.Product.ProductImportViewModel.ImageUrl">
            <summary>
            Property that represents product image url
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.User.SignInViewModel">
            <summary>
            ViewModel class for sign in
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.SignInViewModel.UserName">
            <summary>
            Property that represents user's username
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.SignInViewModel.Password">
            <summary>
            Property that represents user's password
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.SignInViewModel.ReturnUrl">
            <summary>
            Property that represents user's required url
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.User.SignUpViewModel">
            <summary>
            ViewModel class for sign up
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.SignUpViewModel.FirstName">
            <summary>
            Property that represents user's first name
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.SignUpViewModel.LastName">
            <summary>
            Property that represents user's last name
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.SignUpViewModel.UserName">
            <summary>
            Property that represents user's username
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.SignUpViewModel.Email">
            <summary>
            Property that represents user's email
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.SignUpViewModel.Password">
            <summary>
            Property that represents user's password
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.SignUpViewModel.ConfirmPassword">
            <summary>
            Property for password confirmation
            </summary>
        </member>
        <member name="T:PCShop.Core.Models.User.UserExportViewModel">
            <summary>
            UserExportViewModel model
            </summary>
        </member>
        <member name="M:PCShop.Core.Models.User.UserExportViewModel.#ctor">
            <summary>
            Constructor of UserExportViewModel class
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.UserExportViewModel.Id">
            <summary>
            Property that represents user unique identifier
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.UserExportViewModel.Username">
            <summary>
            Property that represents user username
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.UserExportViewModel.Email">
            <summary>
            Property that represents user email
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.UserExportViewModel.FirstName">
            <summary>
            Property that represents user first name
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.UserExportViewModel.LastName">
            <summary>
            Property that represents user last name
            </summary>
        </member>
        <member name="P:PCShop.Core.Models.User.UserExportViewModel.Roles">
            <summary>
            Property that represents user roles
            </summary>
        </member>
        <member name="T:PCShop.Core.Services.Implementations.ClientService">
            <summary>
            Implementation of IClientService interface
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.ClientService.#ctor(PCShop.Infrastructure.Common.IRepository,PCShop.Core.Exceptions.IGuard)">
            <summary>
            Constructor of ClientService class
            </summary>
            <param name="repository">The repository that will be used</param>
            <param name="guard">The guard that will be used</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.ClientService.BuyProduct(System.String)">
            <summary>
            Method to buy a product
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>The client who purchased the product</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.ClientService.GetNumberOfActiveSales(System.String)">
            <summary>
            Method to retrieve the number of active sales for a given user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>The number of active sales of the user</returns>
        </member>
        <member name="T:PCShop.Core.Services.Implementations.HeadphoneService">
            <summary>
            Implementation of IHeadphoneService interface
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.HeadphoneService.#ctor(PCShop.Infrastructure.Common.IRepository,PCShop.Core.Exceptions.IGuard)">
            <summary>
            Constructor of HeadphoneService class
            </summary>
            <param name="repository">The repository that will be used</param>
            <param name="guard">The guard that will be used</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.HeadphoneService.AddHeadphoneAsync(PCShop.Core.Models.Headphone.HeadphoneImportViewModel,System.String)">
            <summary>
            Method to add a headphone
            </summary>
            <param name="model">Headphone input model</param>
            <param name="userId">Headphone's owner unique identifier</param>
            <returns>The unique identifier of the added headphone</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.HeadphoneService.DeleteHeadphoneAsync(System.Int32)">
            <summary>
            Method to mark a specific headphone as deleted
            </summary>
            <param name="id">Headphone unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.HeadphoneService.EditHeadphoneAsync(PCShop.Core.Models.Headphone.HeadphoneEditViewModel)">
            <summary>
            Method to edit a headphone
            </summary>
            <param name="model">Headphone input model</param>
            <returns>The unique identifier of the edited headphone</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.HeadphoneService.GetAllHeadphonesAsync(System.String,PCShop.Core.Constants.Wireless,System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active headphones according to specified criteria
            </summary>
            <param name="type">The criterion for the headphone type</param>
            <param name="wireless">The criterion for the headphone connectivity</param>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>HeadphoneQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.HeadphoneService.GetAllHeadphonesTypesAsync">
            <summary>
            Method to retrieve all headphone types
            </summary>
            <returns>Ordered collection of type names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.HeadphoneService.GetHeadphoneByIdAsHeadphoneDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific headphone
            </summary>
            <param name="id">Headphone unique identifier</param>
            <returns>The headphone as HeadphoneDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.HeadphoneService.GetHeadphoneByIdAsHeadphoneEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific headphone
            </summary>
            <param name="id">Headphone unique identifier</param>
            <returns>The headphone as HeadphoneEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.HeadphoneService.GetUserHeadphonesAsync(System.String)">
            <summary>
            Method to retrieve all active headphones sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of HeadphoneDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.HeadphoneService.MarkHeadphoneAsBoughtAsync(System.Int32)">
            <summary>
            Method to mark the headphone with the given unique identifier as bought
            </summary>
            <param name="id">Headphone unique identifier</param>
        </member>
        <member name="T:PCShop.Core.Services.Implementations.KeyboardService">
            <summary>
            Implementation of IKeyboardService interface
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.#ctor(PCShop.Infrastructure.Common.IRepository,PCShop.Core.Exceptions.IGuard)">
            <summary>
            Cnstructor of KeyboardService class
            </summary>
            <param name="repository">The repository that will be used</param>
            <param name="guard">The guard that will be used</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.AddKeyboardAsync(PCShop.Core.Models.Keyboard.KeyboardImportViewModel,System.String)">
            <summary>
            Method to add a keyboard
            </summary>
            <param name="model">Keyboard input model</param>
            <param name="userId">Keyboard's owner unique identifier</param>
            <returns>The unique identifier of the added keyboard</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.DeleteKeyboardAsync(System.Int32)">
            <summary>
            Method to mark a specific keyboard as deleted
            </summary>
            <param name="id">Keyboard unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.EditKeyboardAsync(PCShop.Core.Models.Keyboard.KeyboardEditViewModel)">
            <summary>
            Method to edit a keyboard
            </summary>
            <param name="model">Keyboard input model</param>
            <returns>The unique identifier of the edited keyboard</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.GetAllKeyboardsAsync(System.String,System.String,PCShop.Core.Constants.Wireless,System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active keyboards according to specified criteria
            </summary>
            <param name="format">The criterion for the keyboard format</param>
            <param name="type">The criterion for the keyboard type</param>
            <param name="wireless">The criterion for the keyboard connectivity</param>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>KeyboardsQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.GetAllKeyboardsFormatsAsync">
            <summary>
            Method to retrieve all keyboard formats
            </summary>
            <returns>Ordered collection of format names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.GetAllKeyboardsTypesAsync">
            <summary>
            Method to retrieve all keyboard types
            </summary>
            <returns>Ordered collection of type names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.GetKeyboardByIdAsKeyboardDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific keyboard
            </summary>
            <param name="id">Keyboard unique identifier</param>
            <returns>The keyboard as KeyboardDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.GetKeyboardByIdAsKeyboardEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific keyboard
            </summary>
            <param name="id">Keyboard unique identifier</param>
            <returns>The keyboard as KeyboardEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.GetUserKeyboardsAsync(System.String)">
            <summary>
            Method to retrieve all active keyboards sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of KeyboardDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.KeyboardService.MarkKeyboardAsBoughtAsync(System.Int32)">
            <summary>
            Method to mark the keyboard with the given unique identifier as bought
            </summary>
            <param name="id">Keyboard unique identifier</param>
        </member>
        <member name="T:PCShop.Core.Services.Implementations.LaptopService">
            <summary>
            Implementation of ILaptopService interface
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.#ctor(PCShop.Infrastructure.Common.IRepository,PCShop.Core.Exceptions.IGuard)">
            <summary>
            Constructor of LaptopService class
            </summary>
            <param name="repository">The repository that will be used</param>
            <param name="guard">The guard that will be used</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.AddLaptopAsync(PCShop.Core.Models.Laptop.LaptopImportViewModel,System.String)">
            <summary>
            Method to add a laptop
            </summary>
            <param name="model">Laptop input model</param>
            <param name="userId">Laptop's owner unique identifier</param>
            <returns>The unique identifier of the added laptop</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.DeleteLaptopAsync(System.Int32)">
            <summary>
            Method to mark a specific laptop as deleted
            </summary>
            <param name="id">Laptop unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.EditLaptopAsync(PCShop.Core.Models.Laptop.LaptopEditViewModel)">
            <summary>
            Method to edit a laptop
            </summary>
            <param name="model">Laptop input model</param>
            <returns>The unique identifier of the edited laptop</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.GetAllLaptopsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active laptops according to specified criteria
            </summary>
            <param name="cpu">The criterion for the CPU model</param>
            <param name="ram">The criterion for the RAM capacity</param>
            <param name="ssdCapacity">The criterion for the SSD capacity</param>
            <param name="videoCard">The criterion for the video card</param>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>LaptopsQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.GetLaptopByIdAsLaptopDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific laptop
            </summary>
            <param name="id">Laptop unique identifier</param>
            <returns>The laptop as LaptopDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.GetLaptopByIdAsLaptopEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific laptop
            </summary>
            <param name="id">Laptop unique identifier</param>
            <returns>The laptop as LaptopEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.GetUserLaptopsAsync(System.String)">
            <summary>
            Method to retrieve all active laptop sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of LaptopDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.MarkLaptopAsBoughtAsync(System.Int32)">
            <summary>
            Method to mark the laptop with the given unique identifier as bought
            </summary>
            <param name="id">Laptop unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.GetAllCpusNamesAsync">
            <summary>
            Method to retrieve all CPU names
            </summary>
            <returns>Ordered collection of CPU names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.GetAllRamsValuesAsync">
            <summary>
            Method to retrieve all RAM values
            </summary>
            <returns>Ordered collection of RAM values</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.GetAllSsdCapacitiesValuesAsync">
            <summary>
            Method to retrieve all SSD capacities
            </summary>
            <returns>Ordered collection of SSD capacities</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.LaptopService.GetAllVideoCardsNamesAsync">
            <summary>
            Method to retrieve all video card names
            </summary>
            <returns>Ordered collection of video card names</returns>
        </member>
        <member name="T:PCShop.Core.Services.Implementations.MicrophoneService">
            <summary>
            Implementation of IMicrophoneService interface
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MicrophoneService.#ctor(PCShop.Infrastructure.Common.IRepository,PCShop.Core.Exceptions.IGuard)">
            <summary>
            Constructor of MicrophoneService class
            </summary>
            <param name="repository">The repository that will be used</param>
            <param name="guard">The guard that will be used</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MicrophoneService.AddMicrophoneAsync(PCShop.Core.Models.Microphone.MicrophoneImportViewModel,System.String)">
            <summary>
            Method to add a microphone
            </summary>
            <param name="model">Microphone input model</param>
            <param name="userId">Microphone's owner unique identifier</param>
            <returns>The unique identifier of the added microphone</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MicrophoneService.DeleteMicrophoneAsync(System.Int32)">
            <summary>
            Method to mark a specific microphone as deleted
            </summary>
            <param name="id">Microphone unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MicrophoneService.EditMicrophoneAsync(PCShop.Core.Models.Microphone.MicrophoneEditViewModel)">
            <summary>
            Method to edit a microphone
            </summary>
            <param name="model">Microphone input model</param>
            <returns>The unique identifier of the edited microphone</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MicrophoneService.GetAllMicrophonesAsync(System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active microphones according to specified criteria
            </summary>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>MicrophonesQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MicrophoneService.GetMicrophoneByIdAsMicrohoneDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific microphone
            </summary>
            <param name="id">Microphone unique identifier</param>
            <returns>The microphone as MicrophoneDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MicrophoneService.GetMicrophoneByIdAsMicrophoneEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific microphone
            </summary>
            <param name="id">Microphone unique identifier</param>
            <returns>The microphone as MicrophoneEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MicrophoneService.GetUserMicrophonesAsync(System.String)">
            <summary>
            Method to retrieve all active microphones sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of MicrophoneDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MicrophoneService.MarkMicrophoneAsBought(System.Int32)">
            <summary>
            Method to mark the microphone with the given unique identifier as bought
            </summary>
            <param name="id">Microphone unique identifier</param>
        </member>
        <member name="T:PCShop.Core.Services.Implementations.MonitorService">
            <summary>
            Implementation of IMonitorService interface
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.#ctor(PCShop.Infrastructure.Common.IRepository,PCShop.Core.Exceptions.IGuard)">
            <summary>
            Constructor of MonitorService class
            </summary>
            <param name="repository">The repository that will be used</param>
            <param name="guard">The guard that will be used</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.AddMonitorAsync(PCShop.Core.Models.Monitor.MonitorImportViewModel,System.String)">
            <summary>
            Method to add a monitor
            </summary>
            <param name="model">Monitor input model</param>
            <param name="userId">Monitor's owner unique identifier</param>
            <returns>The unique identifier of the added monitor</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.DeleteMonitorAsync(System.Int32)">
            <summary>
            Method to mark a specific monitor as deleted
            </summary>
            <param name="id">Monitor unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.EditMonitorAsync(PCShop.Core.Models.Monitor.MonitorEditViewModel)">
            <summary>
            Method to edit a monitor
            </summary>
            <param name="model">Monitor input model</param>
            <returns>The unique identifier of the edited monitor</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.GetAllBrandsNamesAsync">
            <summary>
            Method to retrieve all monitor brands names
            </summary>
            <returns>Ordered collection of brand names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.GetAllDisplaysSizesValuesAsync">
            <summary>
            Method to retrieve all monitor display sizes
            </summary>
            <returns>Ordered collection of display sizes</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.GetAllMonitorsAsync(System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Int32},System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active monitors according to specified criteria
            </summary>
            <param name="brand">The criterion for the monitor brand</param>
            <param name="displaySize">The criterion for the monitor display size</param>
            <param name="resolution">The criterion for the monitor resolution</param>
            <param name="refreshRate">The criterion for the monitor refresh rate</param>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>MonitorsQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.GetAllRefreshRatesValuesAsync">
            <summary>
            Method to retrieve all monitor refresh rates
            </summary>
            <returns>Ordered collection of refresh rates</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.GetAllResolutionsValuesAsync">
            <summary>
            Method to retrieve all monitor resolutions
            </summary>
            <returns>Ordered collection of resolutions</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.GetMonitorByIdAsMonitorDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific monitor
            </summary>
            <param name="id">Monitor unique identifier</param>
            <returns>The monitor as MonitorDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.GetMonitorByIdAsMonitorEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific monitor
            </summary>
            <param name="id">Monitor unique identifier</param>
            <returns>The monitor as MonitorEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.GetUserMonitorsAsync(System.String)">
            <summary>
            Method to retrieve all active monitor sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of MonitorDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MonitorService.MarkMonitorAsBoughtAsync(System.Int32)">
            <summary>
            Method to mark the monitor with the given unique identifier as bought
            </summary>
            <param name="id">Monitor unique identifier</param>
        </member>
        <member name="T:PCShop.Core.Services.Implementations.MouseService">
            <summary>
            Implementation of IMouseService interface
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.#ctor(PCShop.Infrastructure.Common.IRepository,PCShop.Core.Exceptions.IGuard)">
            <summary>
            Constructor of MouseService class
            </summary>
            <param name="repository">The repository that will be used</param>
            <param name="guard">The guard that will be used</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.AddMouseAsync(PCShop.Core.Models.Mouse.MouseImportViewModel,System.String)">
            <summary>
            Method to add a mouse
            </summary>
            <param name="model">Mouse input model</param>
            <param name="userId">Mouse's owner unique identifier</param>
            <returns>The unique identifier of the added mouse</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.DeleteMouseAsync(System.Int32)">
            <summary>
            Method to mark a specific mouse as deleted
            </summary>
            <param name="id">Mouse unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.EditMouseAsync(PCShop.Core.Models.Mouse.MouseEditViewModel)">
            <summary>
            Method to edit a mouse
            </summary>
            <param name="model">Mouse input model</param>
            <returns>The unique identifier of the edited mouse</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.GetAllMiceAsync(System.String,System.String,PCShop.Core.Constants.Wireless,System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active mice according to specified criteria
            </summary>
            <param name="type">The criterion for the mouse type</param>
            <param name="sensitivity">The criterion for the mouse sensitivity</param>
            <param name="wireless">The criterion for the mouse connectivity</param>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>MiceQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.GetAllMiceSensitivitiesAsync">
            <summary>
            Method to retrieve all mouse sensitivities
            </summary>
            <returns>Ordered collection of sensitivity ranges</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.GetAllMiceTypesAsync">
            <summary>
            Method to retrieve all mouse types
            </summary>
            <returns>Ordered collection of type names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.GetMouseByIdAsMouseDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific mouse
            </summary>
            <param name="id">Mouse unique identifier</param>
            <returns>The mouse as MouseDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.GetMouseByIdAsMouseEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific mouse
            </summary>
            <param name="id">Mouse unique identifier</param>
            <returns>The mouse as MouseEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.GetUserMiceAsync(System.String)">
            <summary>
            Method to retrieve all active mice sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of MouseDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.MouseService.MarkMouseAsBoughtAsync(System.Int32)">
            <summary>
            Method to mark the mouse with the given unique identifier as bought
            </summary>
            <param name="id">Mouse unique identifier</param>
        </member>
        <member name="T:PCShop.Core.Services.Implementations.UserService">
            <summary>
            Implementation of IUserService interface
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.UserService.#ctor(PCShop.Infrastructure.Common.IRepository,Microsoft.AspNetCore.Identity.UserManager{PCShop.Infrastructure.Data.Models.Account.User},Microsoft.AspNetCore.Identity.SignInManager{PCShop.Infrastructure.Data.Models.Account.User},PCShop.Core.Exceptions.IGuard)">
            <summary>
            Constructor of UserService class
            </summary>
            <param name="repository">The repository that will be used</param>
            <param name="userManager">The UserManager<c>User</c></param>
            <param name="signInManager">The SignInManager<c>User</c></param>
            <param name="guard">The guard that will be used</param>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.UserService.GetAllUsersThatAreNotInTheSpecifiedRole(System.String)">
            <summary>
            Method to retrieve all users that are not in the specified role
            </summary>
            <param name="roleId">Role unique identifier</param>
            <returns>Ordered collection of UserExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.UserService.PromoteToAdminAsync(System.String)">
            <summary>
            Method to add the user with the specified unique identifier to Administrator role
            </summary>
            <param name="id">User unique identifier</param>
            <returns>The promoted to admin user</returns>
        </member>
        <member name="M:PCShop.Core.Services.Implementations.UserService.ShouldBePromotedToSuperUser(PCShop.Infrastructure.Data.Models.Client)">
            <summary>
            Method to add the user to SuperUser role
            </summary>
            <param name="client">The client who made the purchase</param>
            <returns>True when the count of client purchases is equal to required number of purchases to be SuperUser, else returns false</returns>
        </member>
        <member name="T:PCShop.Core.Services.Interfaces.IClientService">
            <summary>
            Abstraction of ClientService
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IClientService.GetNumberOfActiveSales(System.String)">
            <summary>
            Method to retrieve the number of active sales for a given user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>The number of active sales of the user</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IClientService.BuyProduct(System.String)">
            <summary>
            Method to buy a product
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>The client who purchased the product</returns>
        </member>
        <member name="T:PCShop.Core.Services.Interfaces.IHeadphoneService">
            <summary>
            Abstraction of HeadphoneService
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IHeadphoneService.GetAllHeadphonesAsync(System.String,PCShop.Core.Constants.Wireless,System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active headphones according to specified criteria
            </summary>
            <param name="type">The criterion for the headphone type</param>
            <param name="wireless">The criterion for the headphone connectivity</param>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>HeadphoneQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IHeadphoneService.GetAllHeadphonesTypesAsync">
            <summary>
            Method to retrieve all headphone types
            </summary>
            <returns>Ordered collection of type names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IHeadphoneService.GetHeadphoneByIdAsHeadphoneDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific headphone
            </summary>
            <param name="id">Headphone unique identifier</param>
            <returns>The headphone as HeadphoneDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IHeadphoneService.DeleteHeadphoneAsync(System.Int32)">
            <summary>
            Method to mark a specific headphone as deleted
            </summary>
            <param name="id">Headphone unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IHeadphoneService.AddHeadphoneAsync(PCShop.Core.Models.Headphone.HeadphoneImportViewModel,System.String)">
            <summary>
            Method to add a headphone
            </summary>
            <param name="model">Headphone input model</param>
            <param name="userId">Headphone's owner unique identifier</param>
            <returns>The unique identifier of the added headphone</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IHeadphoneService.GetHeadphoneByIdAsHeadphoneEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific headphone
            </summary>
            <param name="id">Headphone unique identifier</param>
            <returns>The headphone as HeadphoneEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IHeadphoneService.EditHeadphoneAsync(PCShop.Core.Models.Headphone.HeadphoneEditViewModel)">
            <summary>
            Method to edit a headphone
            </summary>
            <param name="model">Headphone input model</param>
            <returns>The unique identifier of the edited headphone</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IHeadphoneService.GetUserHeadphonesAsync(System.String)">
            <summary>
            Method to retrieve all active headphones sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of HeadphoneDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IHeadphoneService.MarkHeadphoneAsBoughtAsync(System.Int32)">
            <summary>
            Method to mark the headphone with the given unique identifier as bought
            </summary>
            <param name="id">Headphone unique identifier</param>
        </member>
        <member name="T:PCShop.Core.Services.Interfaces.IKeyboardService">
            <summary>
            Abstraction of KeyboardService
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IKeyboardService.GetAllKeyboardsAsync(System.String,System.String,PCShop.Core.Constants.Wireless,System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active keyboards according to specified criteria
            </summary>
            <param name="format">The criterion for the keyboard format</param>
            <param name="type">The criterion for the keyboard type</param>
            <param name="wireless">The criterion for the keyboard connectivity</param>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>KeyboardsQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IKeyboardService.GetAllKeyboardsFormatsAsync">
            <summary>
            Method to retrieve all keyboard formats
            </summary>
            <returns>Ordered collection of format names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IKeyboardService.GetAllKeyboardsTypesAsync">
            <summary>
            Method to retrieve all keyboard types
            </summary>
            <returns>Ordered collection of type names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IKeyboardService.GetKeyboardByIdAsKeyboardDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific keyboard
            </summary>
            <param name="id">Keyboard unique identifier</param>
            <returns>The keyboard as KeyboardDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IKeyboardService.DeleteKeyboardAsync(System.Int32)">
            <summary>
            Method to mark a specific keyboard as deleted
            </summary>
            <param name="id">Keyboard unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IKeyboardService.AddKeyboardAsync(PCShop.Core.Models.Keyboard.KeyboardImportViewModel,System.String)">
            <summary>
            Method to add a keyboard
            </summary>
            <param name="model">Keyboard input model</param>
            <param name="userId">Keyboard's owner unique identifier</param>
            <returns>The unique identifier of the added keyboard</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IKeyboardService.GetKeyboardByIdAsKeyboardEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific keyboard
            </summary>
            <param name="id">Keyboard unique identifier</param>
            <returns>The keyboard as KeyboardEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IKeyboardService.EditKeyboardAsync(PCShop.Core.Models.Keyboard.KeyboardEditViewModel)">
            <summary>
            Method to edit a keyboard
            </summary>
            <param name="model">Keyboard input model</param>
            <returns>The unique identifier of the edited keyboard</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IKeyboardService.GetUserKeyboardsAsync(System.String)">
            <summary>
            Method to retrieve all active keyboards sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of KeyboardDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IKeyboardService.MarkKeyboardAsBoughtAsync(System.Int32)">
            <summary>
            Method to mark the keyboard with the given unique identifier as bought
            </summary>
            <param name="id">Keyboard unique identifier</param>
        </member>
        <member name="T:PCShop.Core.Services.Interfaces.ILaptopService">
            <summary>
            Abstraction of LaptopService
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.GetAllLaptopsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active laptops according to specified criteria
            </summary>
            <param name="cpu">The criterion for the CPU model</param>
            <param name="ram">The criterion for the RAM capacity</param>
            <param name="ssdCapacity">The criterion for the SSD capacity</param>
            <param name="videoCard">The criterion for the video card</param>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>LaptopsQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.GetLaptopByIdAsLaptopDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific laptop
            </summary>
            <param name="id">Laptop unique identifier</param>
            <returns>The laptop as LaptopDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.DeleteLaptopAsync(System.Int32)">
            <summary>
            Method to mark a specific laptop as deleted
            </summary>
            <param name="id">Laptop unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.AddLaptopAsync(PCShop.Core.Models.Laptop.LaptopImportViewModel,System.String)">
            <summary>
            Method to add a laptop
            </summary>
            <param name="model">Laptop input model</param>
            <param name="userId">Laptop's owner unique identifier</param>
            <returns>The unique identifier of the added laptop</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.GetLaptopByIdAsLaptopEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific laptop
            </summary>
            <param name="id">Laptop unique identifier</param>
            <returns>The laptop as LaptopEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.EditLaptopAsync(PCShop.Core.Models.Laptop.LaptopEditViewModel)">
            <summary>
            Method to edit a laptop
            </summary>
            <param name="model">Laptop input model</param>
            <returns>The unique identifier of the edited laptop</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.GetUserLaptopsAsync(System.String)">
            <summary>
            Method to retrieve all active laptop sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of LaptopDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.MarkLaptopAsBoughtAsync(System.Int32)">
            <summary>
            Method to mark the laptop with the given unique identifier as bought
            </summary>
            <param name="id">Laptop unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.GetAllCpusNamesAsync">
            <summary>
            Method to retrieve all CPU names
            </summary>
            <returns>Ordered collection of CPU names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.GetAllRamsValuesAsync">
            <summary>
            Method to retrieve all RAM values
            </summary>
            <returns>Ordered collection of RAM values</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.GetAllSsdCapacitiesValuesAsync">
            <summary>
            Method to retrieve all SSD capacities
            </summary>
            <returns>Ordered collection of SSD capacities</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.ILaptopService.GetAllVideoCardsNamesAsync">
            <summary>
            Method to retrieve all video card names
            </summary>
            <returns>Ordered collection of video card names</returns>
        </member>
        <member name="T:PCShop.Core.Services.Interfaces.IMicrophoneService">
            <summary>
            Abstraction of MicrophoneService
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMicrophoneService.GetAllMicrophonesAsync(System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active microphones according to specified criteria
            </summary>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>MicrophonesQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMicrophoneService.GetMicrophoneByIdAsMicrohoneDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific microphone
            </summary>
            <param name="id">Microphone unique identifier</param>
            <returns>The microphone as MicrophoneDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMicrophoneService.DeleteMicrophoneAsync(System.Int32)">
            <summary>
            Method to mark a specific microphone as deleted
            </summary>
            <param name="id">Microphone unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMicrophoneService.AddMicrophoneAsync(PCShop.Core.Models.Microphone.MicrophoneImportViewModel,System.String)">
            <summary>
            Method to add a microphone
            </summary>
            <param name="model">Microphone input model</param>
            <param name="userId">Microphone's owner unique identifier</param>
            <returns>The unique identifier of the added microphone</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMicrophoneService.GetMicrophoneByIdAsMicrophoneEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific microphone
            </summary>
            <param name="id">Microphone unique identifier</param>
            <returns>The microphone as MicrophoneEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMicrophoneService.EditMicrophoneAsync(PCShop.Core.Models.Microphone.MicrophoneEditViewModel)">
            <summary>
            Method to edit a microphone
            </summary>
            <param name="model">Microphone input model</param>
            <returns>The unique identifier of the edited microphone</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMicrophoneService.GetUserMicrophonesAsync(System.String)">
            <summary>
            Method to retrieve all active microphones sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of MicrophoneDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMicrophoneService.MarkMicrophoneAsBought(System.Int32)">
            <summary>
            Method to mark the microphone with the given unique identifier as bought
            </summary>
            <param name="id">Microphone unique identifier</param>
        </member>
        <member name="T:PCShop.Core.Services.Interfaces.IMonitorService">
            <summary>
            Abstraction of MonitorService
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.GetAllMonitorsAsync(System.String,System.Nullable{System.Double},System.String,System.Nullable{System.Int32},System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active monitors according to specified criteria
            </summary>
            <param name="brand">The criterion for the monitor brand</param>
            <param name="displaySize">The criterion for the monitor display size</param>
            <param name="resolution">The criterion for the monitor resolution</param>
            <param name="refreshRate">The criterion for the monitor refresh rate</param>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>MonitorsQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.GetAllBrandsNamesAsync">
            <summary>
            Method to retrieve all monitor brands names
            </summary>
            <returns>Ordered collection of brand names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.GetAllDisplaysSizesValuesAsync">
            <summary>
            Method to retrieve all monitor display sizes
            </summary>
            <returns>Ordered collection of display sizes</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.GetAllResolutionsValuesAsync">
            <summary>
            Method to retrieve all monitor resolutions
            </summary>
            <returns>Ordered collection of resolutions</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.GetAllRefreshRatesValuesAsync">
            <summary>
            Method to retrieve all monitor refresh rates
            </summary>
            <returns>Ordered collection of refresh rates</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.GetMonitorByIdAsMonitorDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific monitor
            </summary>
            <param name="id">Monitor unique identifier</param>
            <returns>The monitor as MonitorDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.DeleteMonitorAsync(System.Int32)">
            <summary>
            Method to mark a specific monitor as deleted
            </summary>
            <param name="id">Monitor unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.AddMonitorAsync(PCShop.Core.Models.Monitor.MonitorImportViewModel,System.String)">
            <summary>
            Method to add a monitor
            </summary>
            <param name="model">Monitor input model</param>
            <param name="userId">Monitor's owner unique identifier</param>
            <returns>The unique identifier of the added monitor</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.GetMonitorByIdAsMonitorEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific monitor
            </summary>
            <param name="id">Monitor unique identifier</param>
            <returns>The monitor as MonitorEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.EditMonitorAsync(PCShop.Core.Models.Monitor.MonitorEditViewModel)">
            <summary>
            Method to edit a monitor
            </summary>
            <param name="model">Monitor input model</param>
            <returns>The unique identifier of the edited monitor</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.GetUserMonitorsAsync(System.String)">
            <summary>
            Method to retrieve all active monitor sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of MonitorDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMonitorService.MarkMonitorAsBoughtAsync(System.Int32)">
            <summary>
            Method to mark the monitor with the given unique identifier as bought
            </summary>
            <param name="id">Monitor unique identifier</param>
        </member>
        <member name="T:PCShop.Core.Services.Interfaces.IMouseService">
            <summary>
            Abstraction of MouseService
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMouseService.GetAllMiceAsync(System.String,System.String,PCShop.Core.Constants.Wireless,System.String,PCShop.Core.Constants.Sorting,System.Int32)">
            <summary>
            Method to retrieve all active mice according to specified criteria
            </summary>
            <param name="type">The criterion for the mouse type</param>
            <param name="sensitivity">The criterion for the mouse sensitivity</param>
            <param name="wireless">The criterion for the mouse connectivity</param>
            <param name="keyword">The criterion for keyword</param>
            <param name="sorting">The criterion for sorting</param>
            <param name="currentPage">Current page number</param>
            <returns>MiceQueryModel object</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMouseService.GetAllMiceTypesAsync">
            <summary>
            Method to retrieve all mouse types
            </summary>
            <returns>Ordered collection of type names</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMouseService.GetAllMiceSensitivitiesAsync">
            <summary>
            Method to retrieve all mouse sensitivities
            </summary>
            <returns>Ordered collection of sensitivity ranges</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMouseService.GetMouseByIdAsMouseDetailsExportViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific mouse
            </summary>
            <param name="id">Mouse unique identifier</param>
            <returns>The mouse as MouseDetailsExportViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMouseService.DeleteMouseAsync(System.Int32)">
            <summary>
            Method to mark a specific mouse as deleted
            </summary>
            <param name="id">Mouse unique identifier</param>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMouseService.AddMouseAsync(PCShop.Core.Models.Mouse.MouseImportViewModel,System.String)">
            <summary>
            Method to add a mouse
            </summary>
            <param name="model">Mouse input model</param>
            <param name="userId">Mouse's owner unique identifier</param>
            <returns>The unique identifier of the added mouse</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMouseService.GetMouseByIdAsMouseEditViewModelAsync(System.Int32)">
            <summary>
            Method to retrieve a specific mouse
            </summary>
            <param name="id">Mouse unique identifier</param>
            <returns>The mouse as MouseEditViewModel</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMouseService.EditMouseAsync(PCShop.Core.Models.Mouse.MouseEditViewModel)">
            <summary>
            Method to edit a mouse
            </summary>
            <param name="model">Mouse input model</param>
            <returns>The unique identifier of the edited mouse</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMouseService.GetUserMiceAsync(System.String)">
            <summary>
            Method to retrieve all active mice sales of the currently logged in user
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>Collection of MouseDetailsExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IMouseService.MarkMouseAsBoughtAsync(System.Int32)">
            <summary>
            Method to mark the mouse with the given unique identifier as bought
            </summary>
            <param name="id">Mouse unique identifier</param>
        </member>
        <member name="T:PCShop.Core.Services.Interfaces.IUserService">
            <summary>
            Abstraction of UserService
            </summary>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IUserService.GetAllUsersThatAreNotInTheSpecifiedRole(System.String)">
            <summary>
            Method to retrieve all users that are not in the specified role
            </summary>
            <param name="roleId">Role unique identifier</param>
            <returns>Ordered collection of UserExportViewModels</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IUserService.ShouldBePromotedToSuperUser(PCShop.Infrastructure.Data.Models.Client)">
            <summary>
            Method to add the user to SuperUser role
            </summary>
            <param name="client">The client who made the purchase</param>
            <returns>True when the count of client purchases is equal to required number of purchases to be SuperUser, else returns false</returns>
        </member>
        <member name="M:PCShop.Core.Services.Interfaces.IUserService.PromoteToAdminAsync(System.String)">
            <summary>
            Method to add the user with the specified unique identifier to Administrator role
            </summary>
            <param name="id">User unique identifier</param>
            <returns>The promoted to admin user</returns>
        </member>
    </members>
</doc>
